// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: kFmBa65GyP6twF6Y4KS9JR
// Component: ohCvjefxUOc7I
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "antd/lib/button"; // plasmic-import: kv6Mk_JNYw/codeComponent
import { Slider } from "@plasmicpkgs/antd/skinny/registerSlider"; // plasmic-import: iBC45mjTXv/codeComponent
import Checkbox from "antd/lib/checkbox/Checkbox"; // plasmic-import: SAEWraOT2YV/codeComponent
import { Collapse } from "@plasmicpkgs/antd/skinny/registerCollapse"; // plasmic-import: F10gpQ1ZhXY/codeComponent
import CollapsePanel from "antd/lib/collapse/CollapsePanel"; // plasmic-import: yegZ392NLoV/codeComponent
import { Dropdown } from "@plasmicpkgs/antd/skinny/registerDropdown"; // plasmic-import: cv59X4q0WK/codeComponent
import Menu from "antd/lib/menu/index"; // plasmic-import: Iz_hLKpHZDg/codeComponent
import MenuItem from "antd/lib/menu/MenuItem"; // plasmic-import: HZ6EmQgIQJr/codeComponent
import SubMenu from "antd/lib/menu/SubMenu"; // plasmic-import: DSwQm8gUYob/codeComponent
import Input from "antd/lib/input"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import Search from "antd/lib/input/Search"; // plasmic-import: zDcn8vsMldu/codeComponent
import Password from "antd/lib/input/Password"; // plasmic-import: fTDg0FM1tnD/codeComponent
import TextArea from "antd/lib/input/TextArea"; // plasmic-import: ZJIPHLoTjkN/codeComponent
import Select from "antd/lib/select"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import Switch from "antd/lib/switch"; // plasmic-import: tRueht1jub/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_copy_of_ant_design_sandbox.module.css"; // plasmic-import: kFmBa65GyP6twF6Y4KS9JR/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: ohCvjefxUOc7I/css

import HeartSvgrepoComsvgIcon from "./icons/PlasmicIcon__HeartSvgrepoComsvg"; // plasmic-import: 8Ut7-0zTzmRsh/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  svg?: p.Flex<"svg">;
  antdCollapse?: p.Flex<typeof Collapse>;
  antdDropdown?: p.Flex<typeof Dropdown>;
  antdInputSearch?: p.Flex<typeof Search>;
  antdInputPassword?: p.Flex<typeof Password>;
  antdInputTextArea?: p.Flex<typeof TextArea>;
};

export interface DefaultHomepageProps {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Ant Design Sandbox"}
          </h1>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__rSxQ2
            )}
          >
            {"Button"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ngkfY)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__qRgmf)}
              >
                {"Default"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__qGogg)}
                type={"primary" as const}
              >
                {"Primary"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__uaMz)}
                ghost={true}
                type={"primary" as const}
              >
                {"Primary Ghost"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton___5Ozu2)}
                danger={true}
              >
                {"Danger"}
              </Button>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__acPn)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__pmLvO)}
                disabled={true}
              >
                {"Disabled"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__uePcy)}
                loading={true}
                type={"primary" as const}
              >
                {"Loading"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__waxHg)}
                shape={"circle" as const}
                type={"primary" as const}
              >
                <HeartSvgrepoComsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__ciTsJ)}
                shape={"round" as const}
              >
                {"Round"}
              </Button>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__hoNyj)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__yA0VT)}
                type={"dashed" as const}
              >
                {"Dashed"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__uOhu)}
                type={"link" as const}
              >
                {"Link"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__sb0L6)}
                type={"text" as const}
              >
                {"Plain text"}
              </Button>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__oAcGc
            )}
          >
            {"Slider"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5JPp)}
            >
              <Slider
                className={classNames("__wab_instance", sty.antdSlider___2N4B6)}
                defaultValue={20 as const}
              />

              <Slider
                className={classNames("__wab_instance", sty.antdSlider__r97Kn)}
                defaultValue={10 as const}
                defaultValue2={20 as const}
                max={40 as const}
                min={0 as const}
                range={true}
              />

              <Slider
                className={classNames("__wab_instance", sty.antdSlider__imrLb)}
                defaultValue={50 as const}
                defaultValue2={20 as const}
                range={false}
                vertical={true}
              />
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__ao0Rs
            )}
          >
            {"Checkbox"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__esBoJ)}
            >
              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__kaWbc
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0Cqiw
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__p2Jvk
                )}
                defaultChecked={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p75WY
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__wHnb2
                )}
                defaultChecked={true}
                disabled={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bRn9V
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames("__wab_instance", sty.antdCheckbox__aT6Y)}
                indeterminate={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__j0Gjy
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__yf8IS
            )}
          >
            {"Collapsible"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___9CHkZ)}
            >
              <Collapse
                data-plasmic-name={"antdCollapse"}
                data-plasmic-override={overrides.antdCollapse}
                className={classNames("__wab_instance", sty.antdCollapse)}
                defaultActiveKey={"2" as const}
              >
                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__u1IpJ
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5P3El
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ss7Wy
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__mtNbt
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sj5Bu
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"2" as const}
                >
                  {"This is the body of the Collapse."}
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__yXx2A
                  )}
                  collapsible={"disabled" as const}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ufcAt
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jwJn
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__ex0Um
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__hJ8IJ
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"4" as const}
                  showArrow={false}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tve54
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>
              </Collapse>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__yurj3
            )}
          >
            {"Dropdown"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__wnzIz)}
            >
              <Dropdown
                data-plasmic-name={"antdDropdown"}
                data-plasmic-override={overrides.antdDropdown}
                arrow={true}
                className={classNames("__wab_instance", sty.antdDropdown)}
                overlay={
                  <Menu
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenu__bfkTl
                    )}
                    defaultOpenKeys={["subMenuKey"]}
                    defaultSelectedKeys={["subMenuItemKey"]}
                    mode={"inline" as const}
                  >
                    <MenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.antdMenuItem__otdlJ
                      )}
                      key={"menuItemKey" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mFs
                        )}
                      >
                        {"Option"}
                      </div>
                    </MenuItem>

                    <SubMenu
                      className={classNames(
                        "__wab_instance",
                        sty.antdSubMenu__jttNr
                      )}
                      key={"subMenuKey" as const}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fjXy7
                          )}
                        >
                          {"Sub-menu"}
                        </div>
                      }
                    >
                      <MenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.antdMenuItem__efAo9
                        )}
                        key={"subMenuItemKey" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ajrll
                          )}
                        >
                          {"A nested submenu item"}
                        </div>
                      </MenuItem>

                      <MenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.antdMenuItem__phSht
                        )}
                        key={"subMenuItemKey2" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sObq
                          )}
                        >
                          {"A nested submenu item"}
                        </div>
                      </MenuItem>
                    </SubMenu>
                  </Menu>
                }
              >
                {"Hover me"}
              </Dropdown>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__dOdox
            )}
          >
            {"Input"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__bUx7G)}
            >
              <Input
                className={classNames("__wab_instance", sty.antdInput__e0A1M)}
                placeholder={"Placeholder" as const}
              />

              <Input
                bordered={false}
                className={classNames("__wab_instance", sty.antdInput__rbDyu)}
                placeholder={"Placeholder" as const}
              />

              <Input
                className={classNames("__wab_instance", sty.antdInput__nts6)}
                disabled={true}
                placeholder={"Placeholder" as const}
              />

              <Input
                className={classNames("__wab_instance", sty.antdInput___5EaQl)}
                defaultValue={"Initial text" as const}
                placeholder={"Placeholder" as const}
              />

              <Search
                data-plasmic-name={"antdInputSearch"}
                data-plasmic-override={overrides.antdInputSearch}
                className={classNames("__wab_instance", sty.antdInputSearch)}
                placeholder={"Search" as const}
              />

              <Password
                data-plasmic-name={"antdInputPassword"}
                data-plasmic-override={overrides.antdInputPassword}
                className={classNames("__wab_instance", sty.antdInputPassword)}
                defaultValue={"password" as const}
              />

              <TextArea
                data-plasmic-name={"antdInputTextArea"}
                data-plasmic-override={overrides.antdInputTextArea}
                className={classNames("__wab_instance", sty.antdInputTextArea)}
                placeholder={"Text area" as const}
              />
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__t0MTk
            )}
          >
            {"Menu"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qFgFl)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__aXxGy
                )}
              >
                {"Vertical"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__dTsa)}
                defaultOpenKeys={["subMenuKey"]}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__kQy5
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xr885
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__i4OBm
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5OHky
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem___5Rmpr
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fs8FF
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__j2YrX
                    )}
                    key={"subMenuItemKey2" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__zq58U
                      )}
                    >
                      {"Sub-menu item 2"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__dEpQ
                )}
              >
                {"Horizontal"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__ovuji)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"horizontal" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__gpQqI
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mL1C
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__xVOkA
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oyRej
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__rMGj6
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__iEjTk
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__h2R
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Bez
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__ckrEt
                )}
              >
                {"Inline"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__hoYn3)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"inline" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__iogLe
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oqdo
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu___6OXtM
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__og6O6
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__otzce
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ui2OT
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__oQrep
                    )}
                    key={"subMenuItemKey2" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wshs8
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__aq4PO
                )}
              >
                {"Dark mode"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__rrri2)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"inline" as const}
                theme={"dark" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem___0GYb4
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___6Bsey
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu___2IcHm
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mkNvl
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__qjYgF
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2JyXl
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__eFIzU
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___7Yseq
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2___3Sh6X
            )}
          >
            {"Select"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__yRhL)}
            >
              <Select
                className={classNames("__wab_instance", sty.antdSelect__q13Mm)}
                defaultOpen={true}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s12W
                    )}
                  >
                    {"Select"}
                  </div>
                }
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__bWi7W
                  )}
                  value={"Option" as const}
                >
                  {"Option"}
                </Option>

                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__ssT4U
                  )}
                  value={"Option 2" as const}
                >
                  {"Option 2"}
                </Option>
              </Select>

              <Select
                bordered={false}
                className={classNames("__wab_instance", sty.antdSelect__aLDaj)}
                placeholder={"Unbordered"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__bJrxb
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mEgat
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect__ddI6T)}
                disabled={true}
                placeholder={"Disabled"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__rb60S
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__oHz2X
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect___2TvKa)}
                loading={true}
                placeholder={"Loading"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__zXe6A
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lx3N
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect__sqRyd)}
                defaultValue={"Option" as const}
                mode={"multiple" as const}
                placeholder={"Loading"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__ltUcg
                  )}
                  value={"Option" as const}
                >
                  {"Option"}
                </Option>

                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__sXvf9
                  )}
                  value={"Option 2" as const}
                >
                  {"Option"}
                </Option>
              </Select>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__kvopf
            )}
          >
            {"Switch"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__dG0Gx)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__hKtg)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__aLc0I
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pwAuf
                    )}
                  >
                    {"Normal"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__f6AzD)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__xjy0D
                    )}
                    defaultChecked={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lk2DY
                    )}
                  >
                    {"Checked"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__rRlez)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__orp0G
                    )}
                    disabled={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sldsz
                    )}
                  >
                    {"Disabled"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eoRkT)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__hnfyA
                    )}
                    loading={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___1GU
                    )}
                  >
                    {"Loading"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__gqHxk)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__bEgYd
                    )}
                    size={"small" as const}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__k4T4
                    )}
                  >
                    {"Small"}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "svg",
    "antdCollapse",
    "antdDropdown",
    "antdInputSearch",
    "antdInputPassword",
    "antdInputTextArea"
  ],
  h1: ["h1"],
  svg: ["svg"],
  antdCollapse: ["antdCollapse"],
  antdDropdown: ["antdDropdown"],
  antdInputSearch: ["antdInputSearch"],
  antdInputPassword: ["antdInputPassword"],
  antdInputTextArea: ["antdInputTextArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  svg: "svg";
  antdCollapse: typeof Collapse;
  antdDropdown: typeof Dropdown;
  antdInputSearch: typeof Search;
  antdInputPassword: typeof Password;
  antdInputTextArea: typeof TextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    svg: makeNodeComponent("svg"),
    antdCollapse: makeNodeComponent("antdCollapse"),
    antdDropdown: makeNodeComponent("antdDropdown"),
    antdInputSearch: makeNodeComponent("antdInputSearch"),
    antdInputPassword: makeNodeComponent("antdInputPassword"),
    antdInputTextArea: makeNodeComponent("antdInputTextArea"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
